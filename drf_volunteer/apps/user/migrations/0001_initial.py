# Generated by Django 2.2 on 2020-02-10 11:35

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Organ',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='机构名', max_length=100, verbose_name='机构名')),
            ],
            options={
                'verbose_name': '机构',
                'verbose_name_plural': '机构',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(blank=True, help_text='手机号', max_length=11, null=True, verbose_name='手机号')),
                ('role', models.IntegerField(choices=[(0, '普通用户'), (1, '管理员'), (2, '超级管理员')], default=0, help_text='角色', verbose_name='角色')),
                ('sex', models.IntegerField(choices=[(0, '男'), (1, '女')], help_text='性别', verbose_name='性别')),
                ('political', models.IntegerField(choices=[(0, '群众'), (1, '共青团员'), (2, '中共预备党员'), (3, '中共党员'), (4, '其它党派')], help_text='政治面貌', verbose_name='政治面貌')),
                ('qq', models.CharField(blank=True, help_text='qq', max_length=30, null=True, verbose_name='qq')),
                ('weixin', models.CharField(blank=True, help_text='微信', max_length=100, null=True, verbose_name='微信')),
                ('location', models.CharField(blank=True, help_text='地址', max_length=120, null=True, verbose_name='地址')),
                ('mail', models.CharField(blank=True, help_text='邮政编码', max_length=30, null=True, verbose_name='邮政编码')),
                ('starttime', models.DateTimeField(default=datetime.datetime(2020, 2, 10, 11, 35, 44, 52262), help_text='注册时间', verbose_name='注册时间')),
                ('activity_time', models.IntegerField(default=0, help_text='义工时', verbose_name='义工时')),
                ('check', models.IntegerField(choices=[(0, '未审核'), (1, '审核通过'), (2, '审核未通过')], default=0, help_text='审核状态', verbose_name='审核状态')),
                ('myclass', models.IntegerField(help_text='班级', verbose_name='班级')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('organ', models.ForeignKey(help_text='所属组织', on_delete=django.db.models.deletion.CASCADE, related_name='user', to='user.Organ', verbose_name='所属组织')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
